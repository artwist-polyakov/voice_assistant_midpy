@startuml

title
<b>Movies voice assistant pipeline</b>
end title

package Users {
    actor VoiceInterface

}

package ETL {
    [Data ETL]
}

package API {
    [API Gateway]
}

package Storage {
   database SearchStorage
}

package Cache {
    database CacheStorage
}

package  Notifications {
    [IsAvailable]
}

package NLPApi {
    [NLP API]
}

package RequestRecognitionPipeline {
    queue SubjectQueue
    queue PersonFilterQueue
    queue RatingOrderQueue
    queue GenreFilterQueue
    queue DateFilterQueue
    queue TitleTextFinderQueue
    queue DescriptionTextFinderQueue
    database ResultsStorage
    [SubjectWorker]
    [PersonFilterWorker]
    [RatingOrderWorker]
    [GenreFilterWorker]
    [DateFilterWorker]
    [TitleTextFinderWorker]
    [DescriptionTextFinderWorker]
}

VoiceInterface --down--> [API Gateway] : voice command
[API Gateway] --> [NLP API] : parse command
[NLP API] --> SubjectQueue : process command
[NLP API] --> PersonFilterQueue : process command
[NLP API] --> RatingOrderQueue : process command
[NLP API] --> GenreFilterQueue : process command
[NLP API] --> DateFilterQueue : process command
[NLP API] --> TitleTextFinderQueue : process command
[NLP API] --> DescriptionTextFinderQueue : process command
SubjectQueue --> [SubjectWorker] : process command
PersonFilterQueue --> [PersonFilterWorker] : process command
RatingOrderQueue --> [RatingOrderWorker] : process command
GenreFilterQueue --> [GenreFilterWorker] : process command
DateFilterQueue --> [DateFilterWorker] : process command
TitleTextFinderQueue --> [TitleTextFinderWorker] : process command
DescriptionTextFinderQueue --> [DescriptionTextFinderWorker] : process command
[SubjectWorker] --> ResultsStorage : store results
[PersonFilterWorker] --> ResultsStorage : store results
[RatingOrderWorker] --> ResultsStorage : store results
[GenreFilterWorker] --> ResultsStorage : store results
[DateFilterWorker] --> ResultsStorage : store results
[TitleTextFinderWorker] --> ResultsStorage : store results
[DescriptionTextFinderWorker] --> ResultsStorage : store results
ResultsStorage --> [API Gateway] : return results

[API Gateway] -left-> CacheStorage : get context from cache

[API Gateway] -right-> SearchStorage : get data from storage

[Data ETL]  --down-> SearchStorage

[API Gateway] --> [IsAvailable] : degradation

@enduml