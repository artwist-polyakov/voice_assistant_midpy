@startuml

title
<b>Movies voice assistant pipeline</b>
end title

package Users {
    actor VoiceInterface

}

package ETL {
    [Data ETL]
}

package API {
    [API Gateway]
}

package Storage {
   database SearchStorage
}

package Cache {
    database CacheStorage
}

package  Notifications {
    [IsAvailable]
}

package NLPApi {
    [NLP API]
}

package RequestRecognitionPipeline {
    [Exchange]
    queue SubjectQueue
    queue PersonFilterQueue
    queue RatingOrderQueue
    queue GenreFilterQueue
    queue DateFilterQueue
    queue TitleTextFinderQueue
    queue DescriptionTextFinderQueue
    database ResultsStorage
    [UniversalWorker]
}

VoiceInterface --down--> [API Gateway] : voice command
[API Gateway] --> [NLP API] : parse command
[NLP API] -down-> [Exchange] : send commands
[Exchange] --> SubjectQueue : process command
[Exchange] -->  PersonFilterQueue : process command
[Exchange] -->  RatingOrderQueue : process command
[Exchange] -->  GenreFilterQueue : process command
[Exchange] --> DateFilterQueue : process command
[Exchange] -->  TitleTextFinderQueue : process command
[Exchange] -->  DescriptionTextFinderQueue : process command
SubjectQueue --> [UniversalWorker] : process command
PersonFilterQueue --> [UniversalWorker] : process command
RatingOrderQueue --> [UniversalWorker] : process command
GenreFilterQueue --> [UniversalWorker] : process command
DateFilterQueue --> [UniversalWorker] : process command
TitleTextFinderQueue --> [UniversalWorker] : process command
DescriptionTextFinderQueue --> [UniversalWorker]: process command
[UniversalWorker] --> ResultsStorage : store results
ResultsStorage -up-> [NLP API] : return results

[API Gateway] -left-> CacheStorage : get context from cache

[API Gateway] -right-> SearchStorage : get data from storage

[Data ETL]  --down-> SearchStorage

[API Gateway] --> [IsAvailable] : degradation

@enduml